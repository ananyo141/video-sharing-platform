version: "3"

services:
  # API Gateway #
  traefik:
    image: traefik:v2.10
    restart: unless-stopped
    command: --api.insecure=true --providers.docker
    ports:
      - "8001:80"
      - "8002:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - video-sharing-platform

  # User Service #
  user-management:
    restart: unless-stopped
    build:
      context: ./user-management
      dockerfile: Dockerfile
    depends_on:
      - user-db
      - traefik
    labels:
      - "traefik.http.routers.user-management.rule=(PathPrefix(`/users`) || PathPrefix(`/auth`))"
    networks:
      - video-sharing-platform
    env_file:
      - ./user-management/.env.docker

  user-db:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_USER: devdocker
      POSTGRES_PASSWORD: dbpassword
      POSTGRES_DB: user-docker-db
    networks:
      - video-sharing-platform
    volumes:
      - user-data:/var/lib/postgresql/data
  # --- END --- #

  # Media Service #
  media-handler:
    restart: always
    build:
      context: ./media-handler
      dockerfile: Dockerfile
    depends_on:
      - media-db
      - media-cache
      - traefik
    labels:
      - "traefik.http.routers.media-handler.rule=PathPrefix(`/media`)"
      - "traefik.http.routers.media-handler.middlewares=user-auth"
      - "traefik.http.middlewares.user-auth.forwardauth.address=http://traefik/auth/verify_token"
      - "traefik.http.middlewares.user-auth.forwardauth.authResponseHeadersRegex=^X-Auth-" # Copy Headers starting with X-Auth-
    networks:
      - video-sharing-platform
    env_file:
      - ./media-handler/.env.docker

  media-cache:
    image: redis:7-alpine
    networks:
      - video-sharing-platform

  media-db:
    image: mongo:latest
    restart: unless-stopped
    networks:
      - video-sharing-platform
    volumes:
      - media-data:/data/db
  # --- END --- #

  # Video Processing Service #
  video-service:
    restart: unless-stopped
    build:
      context: ./video-processing
      dockerfile: Dockerfile
    depends_on:
      - video-bucket
      - video-redis
    networks:
      - video-sharing-platform
    env_file:
      - ./video-processing/.env.docker

  video-redis:
    image: redis:7-alpine
    restart: unless-stopped
    networks:
      - video-sharing-platform

  video-bucket:
    build:
      context: ./video-processing
      dockerfile: bucket.dockerfile
    command: server /data/ --console-address :9001
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
      # For Proxy
      # MINIO_SERVER_URL: http://localhost:8001
      # MINIO_BROWSER_REDIRECT_URL: http://localhost:8001
      MINIO_NOTIFY_AMQP_ENABLE_PRIMARY: "on"
      MINIO_NOTIFY_AMQP_DURABLE_PRIMARY: "on"
      MINIO_NOTIFY_AMQP_URL_PRIMARY: "amqp://guest:guest@events-queue:5672"
      MINIO_NOTIFY_AMQP_EXCHANGE_PRIMARY: "uploadevents"
      MINIO_NOTIFY_AMQP_ROUTING_KEY_PRIMARY: "uploadlogs"
      MINIO_NOTIFY_AMQP_EXCHANGE_TYPE_PRIMARY: "direct"
    depends_on:
      - events-queue
    ports:
      - "8003:9001" # Web Interface
      - "9000:9000" # For s3 access
    networks:
      - video-sharing-platform
    labels:
      - "traefik.http.routers.video-bucket.rule=PathPrefix(`/bucket`)"
    volumes:
      - video-bucket-volume:/data
  # --- END --- #

  bucket-initialize:
    image: minio/mc
    depends_on:
      - video-bucket
    # FIXME (SECURITY!): `download` access allows listing of bucket contents
    entrypoint: >
      /bin/bash -c "
      sleep 15;
      /usr/bin/mc config host add miniobucket http://video-bucket:9000 minioadmin minioadmin;
      /usr/bin/mc mb miniobucket/{images,misc,video-bucket,transcoded-bucket};
      /usr/bin/mc anonymous set download miniobucket/images;
      /usr/bin/mc anonymous set download miniobucket/misc;
      /usr/bin/mc anonymous set download miniobucket/video-bucket;
      /usr/bin/mc anonymous set download miniobucket/transcoded-bucket;
      /usr/bin/mc event add miniobucket/video-bucket arn:minio:sqs::PRIMARY:amqp --event put;
      exit 0;
      "
    networks:
      - video-sharing-platform
  # --- END --- #

  # Events Queue #
  events-queue:
    image: rabbitmq:3.13-alpine
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    networks:
      - video-sharing-platform

  # S3 Service
  s3-service:
    build:
      context: ./s3-service
      dockerfile: dev.dockerfile
    depends_on:
      - traefik
    env_file: ./s3-service/.env.docker
    labels:
      - "traefik.http.routers.video-service.rule=PathPrefix(`/assets`)"
    networks:
      - video-sharing-platform
  # --- END --- #

networks:
  video-sharing-platform:

volumes:
  user-data:
  media-data:
  video-bucket-volume:
