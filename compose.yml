version: "3"

services:
  # API Gateway #
  traefik:
    image: traefik:v2.10
    command: --api.insecure=true --providers.docker
    ports:
      - "8001:80"
      - "8002:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - video-sharing-platform

  # User Service #
  user-management:
    develop:
      watch:
        - action: sync
          path: ./user-management/src
          target: /app/src
          ignore:
            - target/
    build:
      context: ./user-management
      dockerfile: dev.dockerfile
    depends_on:
      - user-db
      - traefik
    labels:
      - "traefik.http.routers.user-management.rule=(PathPrefix(`/users`) || PathPrefix(`/auth`))"
    networks:
      - video-sharing-platform
    env_file:
      - ./user-management/.env.docker

  user-db:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: devdocker
      POSTGRES_PASSWORD: dbpassword
      POSTGRES_DB: user-docker-db
    networks:
      - video-sharing-platform
  # --- END --- #

  # Media Service #
  media-handler:
    develop:
      watch:
        - action: sync
          path: ./media-handler
          target: /app
          ignore:
            - main
            - media-handler
    build:
      context: ./media-handler
      dockerfile: dev.dockerfile
    depends_on:
      - media-db
      - media-cache
      - traefik
    labels:
      - "traefik.http.routers.media-handler.rule=PathPrefix(`/media`)"
      - "traefik.http.routers.media-handler.middlewares=user-auth"
      - "traefik.http.middlewares.user-auth.forwardauth.address=http://traefik/auth/verify_token"
      - "traefik.http.middlewares.user-auth.forwardauth.authResponseHeadersRegex=^X-Auth-" # Copy Headers starting with X-Auth-
    networks:
      - video-sharing-platform
    env_file:
      - ./media-handler/.env.docker

  media-cache:
    image: redis:7-alpine
    networks:
      - video-sharing-platform

  media-db:
    image: mongo:latest
    networks:
      - video-sharing-platform
  # --- END --- #

  # Video Processing Service #
  video-service:
    develop:
      watch:
        - action: sync
          path: ./video-processing/src
          target: /app/src
          ignore:
            - build/
            - uploads/
        - action: rebuild
          path: package.json
    build:
      context: ./video-processing
      dockerfile: dev.dockerfile
    depends_on:
      - video-bucket
      - video-redis
    networks:
      - video-sharing-platform
    env_file:
      - ./video-processing/.env.docker

  video-redis:
    image: redis:7-alpine
    networks:
      - video-sharing-platform

  video-bucket:
    build:
      context: ./video-processing
      dockerfile: bucket.dockerfile
    command: server /data/ --console-address :9001
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
      # For Proxy
      # MINIO_SERVER_URL: http://localhost:8001
      # MINIO_BROWSER_REDIRECT_URL: http://localhost:8001
      MINIO_NOTIFY_AMQP_ENABLE_PRIMARY: "on"
      MINIO_NOTIFY_AMQP_DURABLE_PRIMARY: "on"
      MINIO_NOTIFY_AMQP_URL_PRIMARY: "amqp://guest:guest@events-queue:5672"
      MINIO_NOTIFY_AMQP_EXCHANGE_PRIMARY: "uploadevents"
      MINIO_NOTIFY_AMQP_ROUTING_KEY_PRIMARY: "uploadlogs"
      MINIO_NOTIFY_AMQP_EXCHANGE_TYPE_PRIMARY: "direct"
    depends_on:
      - events-queue
    labels:
      - "traefik.http.routers.video-bucket.rule=PathPrefix(`/bucket`)"
      - "traefik.http.routers.video-bucket.middlewares=path-rewrite"
      - "traefik.http.middlewares.path-rewrite.replacepathregex.regex=^/bucket(.*)$$"
      - "traefik.http.middlewares.path-rewrite.replacepathregex.replacement=$${1}"
    ports:
      - "8003:9001" # Web Interface
      - "9000:9000" # For s3 access
      - "9001:9001" # For minio console
    networks:
      - video-sharing-platform

  bucket-initialize:
    image: minio/mc
    depends_on:
      - video-bucket
    # FIXME (SECURITY!): `download` access allows listing of bucket contents
    entrypoint: >
      /bin/bash -c "
      sleep 15;
      /usr/bin/mc config host add miniobucket http://video-bucket:9000 minioadmin minioadmin;
      /usr/bin/mc mb miniobucket/{images,misc,video-bucket,transcoded-bucket};
      /usr/bin/mc anonymous set download miniobucket/images;
      /usr/bin/mc anonymous set download miniobucket/misc;
      /usr/bin/mc anonymous set download miniobucket/video-bucket;
      /usr/bin/mc anonymous set download miniobucket/transcoded-bucket;
      /usr/bin/mc event add miniobucket/video-bucket arn:minio:sqs::PRIMARY:amqp --event put;
      exit 0;
      "
    networks:
      - video-sharing-platform
  # --- END --- #

  # Events Queue #
  events-queue:
    image: rabbitmq:3.13-management-alpine
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - "8004:15672" # Web Management Interface
    networks:
      - video-sharing-platform

  # S3 Service
  s3-service:
    build:
      context: ./s3-service
      dockerfile: dev.dockerfile
    develop:
      watch:
        - action: sync
          path: ./s3-service/src
          target: /app/src
    depends_on:
      - traefik
    env_file: ./s3-service/.env.docker
    labels:
      - "traefik.http.routers.video-service.rule=PathPrefix(`/assets`)"
    networks:
      - video-sharing-platform

  # Web Client #
  # web-client:
  #   develop:
  #     watch:
  #       - action: sync
  #         path: ./web-client/src
  #         target: /app/src
  #         ignore:
  #           - node_modules/
  #           - .next/
  #       - action: rebuild
  #         path: package.json
  #   build:
  #     context: ./web-client
  #     dockerfile: dev.dockerfile
  #   depends_on:
  #     - traefik
  #   labels:
  #     - "traefik.http.routers.web-client.rule=PathPrefix(`/`)"
  #   networks:
  #     - video-sharing-platform
  # --- END --- #

networks:
  video-sharing-platform:
