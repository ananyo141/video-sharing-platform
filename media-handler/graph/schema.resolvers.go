package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.42

import (
	"context"
	"fmt"
	"media-handler/graph/model"
	"time"
)

// CreateVideo is the resolver for the createVideo field.
func (r *mutationResolver) CreateVideo(ctx context.Context, input model.CreateVideoInput) (*model.Video, error) {
	userid, err := r.GetUserHeader(ctx)
	if err != nil {
		return nil, err
	}
	return r.DB.CreateVideo(input, userid)
}

// UpdateVideo is the resolver for the updateVideo field.
func (r *mutationResolver) UpdateVideo(ctx context.Context, id string, input model.UpdateVideoInput) (*model.Video, error) {
	userid, err := r.GetUserHeader(ctx)
	if err != nil {
		return nil, err
	}
	return r.DB.UpdateVideo(id, input, userid)
}

// DeleteVideo is the resolver for the deleteVideo field.
func (r *mutationResolver) DeleteVideo(ctx context.Context, id string) (*model.Video, error) {
	userid, err := r.GetUserHeader(ctx)
	if err != nil {
		return nil, err
	}
	return r.DB.DeleteVideo(id, userid)
}

// ********* Like Resolver ********* //
func (r *mutationResolver) LikeVideo(ctx context.Context, id string) (*model.Video, error) {
	userid, err := r.GetUserHeader(ctx)
	if err != nil {
		return nil, err
	}
	return r.DB.LikeVideo(id, userid)
}

// ********* Comment Resolvers ********* //
func (r *mutationResolver) CreateComment(ctx context.Context, input model.CreateCommentInput) (*model.Comment, error) {
	userid, err := r.GetUserHeader(ctx)
	if err != nil {
		return nil, err
	}
	return r.DB.CreateComment(input, userid)
}

// UpdateComment is the resolver for the updateComment field.
func (r *mutationResolver) UpdateComment(ctx context.Context, id string, input model.UpdateCommentInput) (*model.Comment, error) {
	userid, err := r.GetUserHeader(ctx)
	if err != nil {
		return nil, err
	}
	return r.DB.UpdateComment(id, input, userid)
}

// DeleteComment is the resolver for the deleteComment field.
func (r *mutationResolver) DeleteComment(ctx context.Context, id string) (*model.Comment, error) {
	userid, err := r.GetUserHeader(ctx)
	if err != nil {
		return nil, err
	}
	return r.DB.DeleteComment(id, userid)
}

// Videos is the resolver for the videos field.
func (r *queryResolver) Videos(ctx context.Context, search *string, userID *int) ([]*model.Video, error) {
	return r.DB.GetVideos(search, userID)
}

// Video is the resolver for the video field.
func (r *queryResolver) Video(ctx context.Context, id string) (*model.Video, error) {
	return r.DB.GetVideo(id)
}

// Comment is the resolver for the comment field.
func (r *queryResolver) Comment(ctx context.Context, id string) (*model.Comment, error) {
	return r.DB.GetComment(id)
}

// VideoProgress is the resolver for the videoProgress field.
func (r *subscriptionResolver) VideoProgress(ctx context.Context, videoID string) (<-chan *model.VideoProgress, error) {
	// panic(fmt.Errorf("not implemented: VideoProgress - videoProgress"))
	// First you'll need to `make()` your channel. Use your type here!
	ch := make(chan *model.VideoProgress)

	// You can (and probably should) handle your channels in a central place outside of `schema.resolvers.go`.
	// For this example we'll simply use a Goroutine with a simple loop.
	go func() {
		// Handle deregistration of the channel here. Note the `defer`
		defer close(ch)

		count := 0
		for {
			count++
			// In our example we'll send the current time every second.
			time.Sleep(1 * time.Second)
			fmt.Println("Tick")

			// Prepare your object.
			currentTime := time.Now()
			t := &model.VideoProgress{
				VideoID:   videoID,
				UserID:    1,
				UpdatedAt: currentTime,
				Progress:  count,
			}

			if count == 100 {
				return
			}

			// The subscription may have got closed due to the client disconnecting.
			// Hence we do send in a select block with a check for context cancellation.
			// This avoids goroutine getting blocked forever or panicking,
			select {
			case <-ctx.Done(): // This runs when context gets cancelled. Subscription closes.
				fmt.Println("Subscription Closed")
				// Handle deregistration of the channel here. `close(ch)`
				return // Remember to return to end the routine.

			case ch <- t: // This is the actual send.
				// Our message went through, do nothing
			}
		}
	}()
	// We return the channel and no error.
	return ch, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
